/*
 * Landelijke tabellen
 *
 * API voor het ontsluiten van landelijke tabellen die op de website van BZK worden gepubliceerd.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// WaardeAllOf
    /// </summary>
    [DataContract]
    public partial class WaardeAllOf :  IEquatable<WaardeAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WaardeAllOf" /> class.
        /// </summary>
        /// <param name="datumEinde">Einddatum van de geldigheid van de gegevens..</param>
        /// <param name="datumIngang">Begindatum van de geldigheid van de gegevens.</param>
        /// <param name="nieuweCode">Code van de nieuwegevormde gemeente waarin deze gemeente is overgegaan. Dit element komt alleen voor in de Gemeenten-tabel.</param>
        /// <param name="soort">Soort reden beëindigen of opnemen nationaliteit. Dit element komt alleen voor in de tabel Reden opnemen - beeindigen Nationaliteit..</param>
        public WaardeAllOf(DateTime datumEinde = default(DateTime), DateTime datumIngang = default(DateTime), string nieuweCode = default(string), string soort = default(string))
        {
            this.DatumEinde = datumEinde;
            this.DatumIngang = datumIngang;
            this.NieuweCode = nieuweCode;
            this.Soort = soort;
        }

        /// <summary>
        /// Einddatum van de geldigheid van de gegevens.
        /// </summary>
        /// <value>Einddatum van de geldigheid van de gegevens.</value>
        [DataMember(Name="datumEinde", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime DatumEinde { get; set; }

        /// <summary>
        /// Begindatum van de geldigheid van de gegevens
        /// </summary>
        /// <value>Begindatum van de geldigheid van de gegevens</value>
        [DataMember(Name="datumIngang", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime DatumIngang { get; set; }

        /// <summary>
        /// Code van de nieuwegevormde gemeente waarin deze gemeente is overgegaan. Dit element komt alleen voor in de Gemeenten-tabel
        /// </summary>
        /// <value>Code van de nieuwegevormde gemeente waarin deze gemeente is overgegaan. Dit element komt alleen voor in de Gemeenten-tabel</value>
        [DataMember(Name="nieuweCode", EmitDefaultValue=false)]
        public string NieuweCode { get; set; }

        /// <summary>
        /// Soort reden beëindigen of opnemen nationaliteit. Dit element komt alleen voor in de tabel Reden opnemen - beeindigen Nationaliteit.
        /// </summary>
        /// <value>Soort reden beëindigen of opnemen nationaliteit. Dit element komt alleen voor in de tabel Reden opnemen - beeindigen Nationaliteit.</value>
        [DataMember(Name="soort", EmitDefaultValue=false)]
        public string Soort { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WaardeAllOf {\n");
            sb.Append("  DatumEinde: ").Append(DatumEinde).Append("\n");
            sb.Append("  DatumIngang: ").Append(DatumIngang).Append("\n");
            sb.Append("  NieuweCode: ").Append(NieuweCode).Append("\n");
            sb.Append("  Soort: ").Append(Soort).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WaardeAllOf);
        }

        /// <summary>
        /// Returns true if WaardeAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of WaardeAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WaardeAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DatumEinde == input.DatumEinde ||
                    (this.DatumEinde != null &&
                    this.DatumEinde.Equals(input.DatumEinde))
                ) && 
                (
                    this.DatumIngang == input.DatumIngang ||
                    (this.DatumIngang != null &&
                    this.DatumIngang.Equals(input.DatumIngang))
                ) && 
                (
                    this.NieuweCode == input.NieuweCode ||
                    (this.NieuweCode != null &&
                    this.NieuweCode.Equals(input.NieuweCode))
                ) && 
                (
                    this.Soort == input.Soort ||
                    (this.Soort != null &&
                    this.Soort.Equals(input.Soort))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DatumEinde != null)
                    hashCode = hashCode * 59 + this.DatumEinde.GetHashCode();
                if (this.DatumIngang != null)
                    hashCode = hashCode * 59 + this.DatumIngang.GetHashCode();
                if (this.NieuweCode != null)
                    hashCode = hashCode * 59 + this.NieuweCode.GetHashCode();
                if (this.Soort != null)
                    hashCode = hashCode * 59 + this.Soort.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // NieuweCode (string) maxLength
            if(this.NieuweCode != null && this.NieuweCode.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NieuweCode, length must be less than 4.", new [] { "NieuweCode" });
            }

 
            yield break;
        }
    }

}
