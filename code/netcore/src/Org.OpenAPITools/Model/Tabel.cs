/*
 * Landelijke tabellen
 *
 * API voor het ontsluiten van landelijke tabellen die op de website van BZK worden gepubliceerd.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Landelijke tabellen zoals ontsloten door het RvIG.
    /// </summary>
    [DataContract(Name = "Tabel")]
    public partial class Tabel : IEquatable<Tabel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Tabel" /> class.
        /// </summary>
        /// <param name="tabelidentificatie">De identificatie, behorende bij de tabel..</param>
        /// <param name="omschrijving">De omschrijving van de landelijke tabel.</param>
        public Tabel(string tabelidentificatie = default(string), string omschrijving = default(string))
        {
            this.Tabelidentificatie = tabelidentificatie;
            this.Omschrijving = omschrijving;
        }

        /// <summary>
        /// De identificatie, behorende bij de tabel.
        /// </summary>
        /// <value>De identificatie, behorende bij de tabel.</value>
        [DataMember(Name = "tabelidentificatie", EmitDefaultValue = false)]
        public string Tabelidentificatie { get; set; }

        /// <summary>
        /// De omschrijving van de landelijke tabel
        /// </summary>
        /// <value>De omschrijving van de landelijke tabel</value>
        [DataMember(Name = "omschrijving", EmitDefaultValue = false)]
        public string Omschrijving { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Tabel {\n");
            sb.Append("  Tabelidentificatie: ").Append(Tabelidentificatie).Append("\n");
            sb.Append("  Omschrijving: ").Append(Omschrijving).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Tabel);
        }

        /// <summary>
        /// Returns true if Tabel instances are equal
        /// </summary>
        /// <param name="input">Instance of Tabel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Tabel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Tabelidentificatie == input.Tabelidentificatie ||
                    (this.Tabelidentificatie != null &&
                    this.Tabelidentificatie.Equals(input.Tabelidentificatie))
                ) && 
                (
                    this.Omschrijving == input.Omschrijving ||
                    (this.Omschrijving != null &&
                    this.Omschrijving.Equals(input.Omschrijving))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Tabelidentificatie != null)
                    hashCode = hashCode * 59 + this.Tabelidentificatie.GetHashCode();
                if (this.Omschrijving != null)
                    hashCode = hashCode * 59 + this.Omschrijving.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
